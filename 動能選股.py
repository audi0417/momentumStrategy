# -*- coding: utf-8 -*-
"""動能選股(Github Actions 部署版本)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BPiBju0KvLRblu5N93PAVE3Fn2hCiz62
"""

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import pandas as pd
import requests
from bs4 import BeautifulSoup
import numpy as np
import time
import yfinance as yf
from tqdm import tqdm
import mplfinance as mpf
#from talib.abstract import *
import datetime
import logging
import os

def format_mail_content(momentum_stocks, rsi_stocks, macd_stocks, final_stocks, total_stocks):


    content = f"""
股票篩選結果
======================

篩選概況
--------
- 篩選總數: {total_stocks} 支股票

動能選股 (共 {len(momentum_stocks)} 支)
-------------------"""

    if momentum_stocks:
        content += "\n"
        for stock, momentum in momentum_stocks.items():
            stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
            turnover = format_number(get_turnover_batch(stock))
            content += f"• {stock} {stock_name}: 動能 {momentum:.2f}%, 成交量 {turnover}\n"

    content += f"""
RSI選股 (共 {len(rsi_stocks)} 支)
-----------------"""

    if rsi_stocks:
        content += "\n"
        for stock in rsi_stocks:
            stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
            turnover = format_number(get_turnover_batch(stock))
            content += f"• {stock} {stock_name}: 成交量 {turnover}\n"

    content += f"""
MACD選股 (共 {len(macd_stocks)} 支)
------------------"""

    if macd_stocks:
        content += "\n"
        for stock in macd_stocks:
            stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
            turnover = format_number(get_turnover_batch(stock))
            content += f"• {stock} {stock_name}: 成交量 {turnover}\n"

    content += "\n最終篩選結果"
    content += "\n-----------------"
    if final_stocks:
        content += f"\n符合所有條件的股票 (共 {len(final_stocks)} 支):\n"
        for stock in final_stocks:
            stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
            momentum = momentum_stocks[stock]
            turnover = format_number(get_turnover_batch(stock))
            content += f"• {stock} {stock_name}\n"
            content += f"  動能: {momentum:.2f}%, 成交量: {turnover}\n"
    else:
        content += "\n本日無股票符合所有條件"

    return content

def send_mail(sender_email, app_password, receiver_email, content):
    try:
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = receiver_email
        msg['Subject'] = f"股票篩選結果 - {datetime.datetime.now().strftime('%Y-%m-%d')}"

        msg.attach(MIMEText(content, 'plain', 'utf-8'))

        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(sender_email, app_password)
        server.send_message(msg)
        server.quit()

        print("郵件發送成功！")
    except Exception as e:
        print(f"發送郵件時發生錯誤：{str(e)}")

# Commented out IPython magic to ensure Python compatibility.
logging.getLogger('yfinance').setLevel(logging.CRITICAL)
# %matplotlib inline
pd.options.mode.chained_assignment = None  # 關閉警告
pd.options.mode.chained_assignment = 'warn'  # 開啟警告（預設值）

"""## 股票爬蟲"""

#國內上市證卷辨識號碼一覽表
url = "https://isin.twse.com.tw/isin/C_public.jsp?strMode=2"
res = requests.get(url)
TWSE_listed = pd.read_html(res.text)[0]
# 設定column名稱
TWSE_listed.columns = list(TWSE_listed.iloc[0].values)
# 刪除第一行
TWSE_listed = TWSE_listed.iloc[2:]
TWSE_listed.reset_index(drop=True, inplace=True)

#國內上櫃證卷辨識號碼一覽表
url = "https://isin.twse.com.tw/isin/C_public.jsp?strMode=4"
res = requests.get(url)
TPEX_listed = pd.read_html(res.text)[0]
# 設定column名稱
TPEX_listed.columns = list(TPEX_listed.iloc[0].values)
# 刪除第一行
TPEX_listed = TPEX_listed.iloc[2:]
TPEX_listed.reset_index(drop=True, inplace=True)

# 刪除第一行並合併
TWSE_listed = TWSE_listed.iloc[2:]
TPEX_listed = TPEX_listed.iloc[2:]
all_stock = pd.concat([TWSE_listed, TPEX_listed])

all_stock.reset_index(drop=True, inplace=True)

#整理欄位
# 修改欄位處理方式
def process_stock_info(text):
    # 處理可能的 NaN 值
    if pd.isna(text):
        return None, None

    # 移除多餘的空格並分割
    parts = text.strip().split()
    if len(parts) >= 2:
        return parts[0], ' '.join(parts[1:])
    return None, None

# 處理股票代號和名稱
stock_info = all_stock["有價證券代號及名稱"].apply(process_stock_info)
stock_num = stock_info.apply(lambda x: x[0])
stock_name = stock_info.apply(lambda x: x[1])

# 插入新欄位
all_stock.insert(0, "股票代號", stock_num, True)
all_stock.insert(1, "股票名稱", stock_name, True)
all_stock = all_stock.drop(["有價證券代號及名稱"], axis=1)

# 只保留普通股
all_stock = all_stock[all_stock['CFICode']=="ESVUFR"]

# 移除股票代號或名稱為 None 的列
all_stock = all_stock.dropna(subset=['股票代號', '股票名稱'])

start_date = "2024-01-01"
end_date = datetime.datetime.now().strftime("%Y-%m-%d")
#end_date = "2024-12-31"

from concurrent.futures import ThreadPoolExecutor
import time
import random
from tqdm import tqdm
from rich.console import Console
from rich.progress import Progress, TextColumn, BarColumn, TaskProgressColumn

console = Console()
url = "https://www.tpex.org.tw/www/zh-tw/afterTrading/dailyQuotes"

res = requests.get(url, params={
        "response": "json",
        "date": datetime.datetime.now().strftime("%Y%mm%dd")
})
TPEx_turnover = res.json()['tables'][0]['data']

def get_turnover_batch(stock_num):
    """獲取單一股票的成交量資料"""
    try:
        # 取得股票市場類型
        market_type = all_stock.loc[all_stock["股票代號"]==stock_num, "市場別"].values[0]

        if market_type == "上櫃":
            # 處理上櫃股票
            for stock in TPEx_turnover:
                if stock[0] == stock_num:
                    return stock[9]  # 返回成交量
            raise ValueError(f"找不到上櫃股票 {stock_num} 的成交量資料")

        else:  # 處理上市股票
            url = "https://www.twse.com.tw/exchangeReport/STOCK_DAY"
            res = requests.get(url, params={
                "response": "json",
                "date": datetime.datetime.now().strftime("%Y%m%d"),
                "stockNo": stock_num
            })

            if res.status_code == 200:
                res_json = res.json()
                daily_price_list = res_json.get("data", [])
                if daily_price_list:
                    return daily_price_list[-1][2]  # 返回成交量

            raise ValueError(f"找不到上市股票 {stock_num} 的成交量資料")

    except Exception as e:
        raise Exception(f"獲取股票 {stock_num} 成交量時發生錯誤: {str(e)}")


def get_stock_data(stock_info, max_retries=3, base_delay=1):
    stock_num, market_type = stock_info

    for attempt in range(max_retries):
        try:
            time.sleep(base_delay + random.uniform(0, 1))

            if market_type == "上市":
                target = yf.Ticker(f"{stock_num}.TW")
            elif market_type == "上市臺灣創新板":
                target = yf.Ticker(f"{stock_num}.TW")
            else:
                target = yf.Ticker(f"{stock_num}.TWO")

            data = target.history(start=start_date, end=end_date)

            if len(data) == 0:
                if attempt == max_retries - 1:
                    console.print(f"[yellow]警告: {stock_num} 無法獲取資料[/yellow]")
                    return stock_num, None
                continue

            return stock_num, data

        except Exception as e:
            if attempt == max_retries - 1:
                console.print(f"[red]錯誤: {stock_num} - {str(e)}[/red]")
                return stock_num, None

            delay = base_delay * (1.5 ** attempt) + random.uniform(0, 0.5)
            time.sleep(delay)

    return stock_num, None

def parallel_get_stock_data(max_workers=5):
    import concurrent.futures

    batch_size = 50
    stock_info_list = [(num, all_stock.loc[all_stock["股票代號"]==num, "市場別"].values[0])
                       for num in all_stock["股票代號"]]

    stock_index = {}
    total_stocks = len(stock_info_list)

    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(complete_style="green"),
        TaskProgressColumn(),
        console=console,
        transient=True
    ) as progress:
        task = progress.add_task("[cyan]處理股票資料...", total=total_stocks)

        for i in range(0, len(stock_info_list), batch_size):
            batch = stock_info_list[i:i+batch_size]

            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                future_to_stock = {executor.submit(get_stock_data, stock_info): stock_info
                                 for stock_info in batch}

                for future in concurrent.futures.as_completed(future_to_stock):
                    stock_num, data = future.result()

                    if data is not None:
                        stock_index[stock_num] = data

                    progress.update(task, advance=1)

            time.sleep(0.2)

    return stock_index

def calculate_momentum(df):
    try:
        # 確保使用正確的欄位名稱
        close_prices = df['Close'] if 'Close' in df.columns else df['close']
        momentum = (close_prices.iloc[-1] / close_prices.iloc[-5] - 1) * 100
        return momentum
    except Exception as e:
        print(f"計算動能時發生錯誤: {str(e)}")
        return None
def calculate_rsi(data, periods):
    # 計算價格變化
    df = data.copy()
    df['price_change'] = df['close'].diff()

    # 分別計算上漲和下跌
    df['gain'] = df['price_change'].apply(lambda x: x if x > 0 else 0)
    df['loss'] = df['price_change'].apply(lambda x: abs(x) if x < 0 else 0)

    # 計算平均上漲和下跌
    avg_gain = df['gain'].rolling(window=periods).mean()
    avg_loss = df['loss'].rolling(window=periods).mean()

    # 計算RS和RSI
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    return rsi

def calculate_macd(data, fast_period=12, slow_period=26, signal_period=9):
    # 計算快線和慢線的EMA
    fast_ema = data['close'].ewm(span=fast_period, adjust=False).mean()
    slow_ema = data['close'].ewm(span=slow_period, adjust=False).mean()

    # 計算MACD線
    macd_line = fast_ema - slow_ema

    # 計算信號線
    signal_line = macd_line.ewm(span=signal_period, adjust=False).mean()

    # 計算柱狀圖
    histogram = macd_line - signal_line

    return pd.DataFrame({
        'macd': macd_line,
        'macdsignal': signal_line,
        'macdhist': histogram
    })

def Signal_rsi(data, shortTern, longTern):
    try:
        df = data.copy()
        df.columns = df.columns.str.lower()

        Signal = [0]
        shortRSI = calculate_rsi(df, shortTern)
        longRSI = calculate_rsi(df, longTern)

        for i in range(1, len(longRSI)):
            B_shortRSI = shortRSI.iloc[i-2]
            B_longRSI = longRSI.iloc[i-2]
            L_shortRSI = shortRSI.iloc[i-1]
            L_longRSI = longRSI.iloc[i-1]
            t_shortRSI = shortRSI.iloc[i]
            t_longRSI = longRSI.iloc[i]

            if not (pd.isna(L_shortRSI) or pd.isna(L_longRSI)):
                if B_longRSI > B_shortRSI and L_longRSI > L_shortRSI and t_longRSI > t_shortRSI:
                    if (B_longRSI - B_shortRSI >= L_longRSI - L_shortRSI and
                        L_longRSI - L_shortRSI > t_longRSI - t_shortRSI and
                        L_shortRSI < t_shortRSI and B_shortRSI < L_shortRSI):
                        Signal.append(100)
                    else:
                        Signal.append(0)
                elif B_longRSI < B_shortRSI and L_longRSI < L_shortRSI and t_longRSI < t_shortRSI:
                    if (B_shortRSI - B_longRSI >= L_shortRSI - L_longRSI and
                        L_shortRSI - L_longRSI > t_shortRSI - t_longRSI and
                        L_shortRSI > t_shortRSI and B_shortRSI > L_shortRSI):
                        Signal.append(-100)
                    else:
                        Signal.append(0)
                else:
                    Signal.append(0)
            else:
                Signal.append(0)
        return Signal

    except Exception as e:
        print(f"計算RSI信號時發生錯誤: {str(e)}")
        return None

def Signal_macd(data, fastperiod=12, slowperiod=26, signalperiod=9):
    try:
        df = data.copy()
        df.columns = df.columns.str.lower()

        Signal = [0]
        macd = calculate_macd(df, fastperiod, slowperiod, signalperiod)

        for i in range(1, len(macd)):
            BeforeMACD = macd['macdsignal'].iloc[i-2]
            BeforeDIF = macd['macd'].iloc[i-2]
            LastMACD = macd['macdsignal'].iloc[i-1]
            LastDIF = macd['macd'].iloc[i-1]
            ThisMACD = macd['macdsignal'].iloc[i]
            ThisDIF = macd['macd'].iloc[i]

            if not (pd.isna(LastMACD) or pd.isna(LastDIF)):
                if BeforeMACD > BeforeDIF and LastMACD > LastDIF and ThisMACD > ThisDIF:
                    if (BeforeMACD - BeforeDIF >= LastMACD - LastDIF and
                        LastMACD - LastDIF > ThisMACD - ThisDIF and
                        LastDIF < ThisDIF and BeforeDIF < LastDIF):
                        Signal.append(100)
                    else:
                        Signal.append(0)
                elif BeforeMACD < BeforeDIF and LastMACD < LastDIF and ThisMACD < ThisDIF:
                    if (BeforeDIF - BeforeMACD >= LastDIF - LastMACD and
                        LastDIF - LastMACD > ThisDIF - ThisMACD and
                        LastDIF > ThisDIF and BeforeDIF > LastDIF):
                        Signal.append(-100)
                    else:
                        Signal.append(0)
                else:
                    Signal.append(0)
            else:
                Signal.append(0)

        return Signal

    except Exception as e:
        print(f"計算MACD信號時發生錯誤: {str(e)}")
        return None

def format_number(number):
    try:
        # 將字串轉為整數並格式化
        if isinstance(number, str):
            number = int(number.replace(',', ''))
        return f"{number:,d}"
    except Exception as e:
        return str(number)

def main():
    try:
        # 1. 獲取股票資料
        console.print("[cyan]開始獲取股票資料...[/cyan]")
        stock_index = parallel_get_stock_data(max_workers=3)

        if isinstance(stock_index, list):
            stock_index = dict(stock_index)

        if not stock_index:
            console.print("[red]錯誤: 未能成功獲取任何股票資料[/red]")
            return
        console.print(f"[green]成功獲取 {len(stock_index)} 支股票的資料[/green]")
        console.print("=" * 50)

        # 2. 動能篩選
        console.print("\n[cyan]開始進行動能篩選...[/cyan]")
        momentum_stocks = {}
        for stock_num, df in stock_index.items():
            if len(df) >= 126:
                momentum = calculate_momentum(df)
                try:
                    turnover = int(get_turnover_batch(stock_num).replace(',', ''))
                    if momentum and momentum > 7 and turnover > 500000000:
                        momentum_stocks[stock_num] = momentum
                except Exception as e:
                    console.print(f"[yellow]警告: {stock_num} 成交量檢查失敗 ({str(e)})[/yellow]")
                    continue

        # 3. 輸出動能篩選結果（排序後）
        console.print("\n動能篩選結果:")
        console.print("=" * 50)
        if momentum_stocks:
            sorted_momentum_stocks = sorted(momentum_stocks.items(), key=lambda x: x[1], reverse=True)
            console.print(f"[green]共找到 {len(sorted_momentum_stocks)} 支符合動能條件的股票:[/green]")
            for stock, momentum in sorted_momentum_stocks:
                stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
                turnover = get_turnover_batch(stock)
                turnover_formatted = format_number(turnover)
                console.print(f"股票代號: {stock} - {stock_name} (動能值: {momentum:.2f}%, 成交量: {turnover_formatted})")
        else:
            console.print("[yellow]沒有找到符合動能條件的股票[/yellow]")
        console.print("=" * 50)

        # 4. RSI篩選
        console.print("\n[cyan]開始進行RSI篩選...[/cyan]")
        rsi_stocks = []
        for stock_num, df in stock_index.items():
            if len(df) >= 126:
                rsi_signal = Signal_rsi(df, shortTern=5, longTern=80)
                try:
                    turnover = int(get_turnover_batch(stock_num).replace(',', ''))
                    if rsi_signal and rsi_signal[-1] == 100 and turnover > 500000000:
                        rsi_stocks.append(stock_num)
                except Exception as e:
                    console.print(f"[yellow]警告: {stock_num} 成交量檢查失敗 ({str(e)})[/yellow]")
                    continue

        # 5. 輸出RSI篩選結果
        console.print("\nRSI篩選結果:")
        console.print("=" * 50)
        if rsi_stocks:
            console.print(f"[green]共找到 {len(rsi_stocks)} 支符合RSI條件的股票:[/green]")
            for stock in rsi_stocks:
                stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
                turnover = get_turnover_batch(stock)
                turnover_formatted = format_number(turnover)
                console.print(f"股票代號: {stock} - {stock_name} (成交量: {turnover_formatted})")
        else:
            console.print("[yellow]沒有找到符合RSI條件的股票[/yellow]")
        console.print("=" * 50)

        # 6. MACD篩選
        console.print("\n[cyan]開始進行MACD篩選...[/cyan]")
        macd_stocks = []
        for stock_num, df in stock_index.items():
            if len(df) >= 126:
                macd_signal = Signal_macd(df, fastperiod=12, slowperiod=26, signalperiod=9)
                try:
                    turnover = int(get_turnover_batch(stock_num).replace(',', ''))
                    if macd_signal and macd_signal[-1] == 100 and turnover > 500000000:
                        macd_stocks.append(stock_num)
                except Exception as e:
                    console.print(f"[yellow]警告: {stock_num} 成交量檢查失敗 ({str(e)})[/yellow]")
                    continue

        # 7. 輸出MACD篩選結果
        console.print("\nMACD篩選結果:")
        console.print("=" * 50)
        if macd_stocks:
            console.print(f"[green]共找到 {len(macd_stocks)} 支符合MACD條件的股票:[/green]")
            for stock in macd_stocks:
                stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
                turnover = get_turnover_batch(stock)
                turnover_formatted = format_number(turnover)
                console.print(f"股票代號: {stock} - {stock_name} (成交量: {turnover_formatted})")
        else:
            console.print("[yellow]沒有找到符合MACD條件的股票[/yellow]")
        console.print("=" * 50)

        # 8. 最終篩選結果
        console.print("\n[cyan]最終篩選結果:[/cyan]")
        console.print("=" * 50)
        final_qualified_stocks = [stock for stock in momentum_stocks
                                if stock in rsi_stocks and stock in macd_stocks]

        if final_qualified_stocks:
            console.print(f"[green]共找到 {len(final_qualified_stocks)} 支符合所有條件的股票:[/green]")
            for stock in final_qualified_stocks:
                stock_name = all_stock.loc[all_stock["股票代號"]==stock, "股票名稱"].values[0]
                print(f"\n股票代號: {stock} - {stock_name} 的篩選指標:")
                print(f"動能值: {momentum_stocks[stock]:.2f}%")
                try:
                    turnover = get_turnover_batch(stock)
                    turnover_formatted = format_number(turnover)
                    print(f"成交量: {turnover_formatted}")
                except Exception as e:
                    print(f"成交量: 取得失敗 ({str(e)})")
        else:
            console.print("[yellow]沒有找到符合所有條件的股票[/yellow]")
        mail_content = format_mail_content(
            momentum_stocks,
            rsi_stocks,
            macd_stocks,
            final_qualified_stocks,
            len(stock_index)
        )

        sender_email = "audiaudy3030422@gmail.com"
        app_password = os.getenv("APP_PASSWORD")
        receiver_email = "audiaudy3030422@gmail.com"

        send_mail(sender_email, app_password, receiver_email, mail_content)
    except Exception as e:
        console.print(f"[red]執行過程發生錯誤: {str(e)}[/red]")

    finally:
        console.print("\n[green]程式執行完成[/green]")

if __name__ == "__main__":
    try:
        print("程式開始執行...")
        print("時間範圍:", start_date, "到", end_date)
        print("-" * 50)
        main()
    except KeyboardInterrupt:
        print("\n程式被使用者中斷")
    except Exception as e:
        print(f"\n程式執行時發生未預期的錯誤: {str(e)}")
